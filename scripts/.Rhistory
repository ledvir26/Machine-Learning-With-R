tuneLength = 10)
caret_knn_fit <- train(Result ~ Family_size.z + Income, data=train,
method ="knn", trControl = trcntrl,
preProcess = c("center", "scale"),
tuneLength = 10)
caret_knn_fit
pred5 <- knn(train[,4:5], val[,4:5], train[,3], k=5, prob=T)
pred5
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
library(nnet)
library(caret)
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- nnet(class ~ ., data = bn[t.id,],
size = 3, maxit = 10000, decay = 0.001, rang = 0.05)
mod <- nnet(class ~ ., data = bn[t.id,],
size = 3, maxit = 10000, decay = 0.001, rang = 0.05,
na.action = na.omit, skip = T)
# ranf * max(|variables|) ~ 1
apply(bn, 2, max)
pred <. predict(mod, newdata = bn[-t.id,], type = "raw")
pred <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- perfo
perf <- performance(prediction(pred2, bn[-t.id, "class"]), "tpr","fpe")
library(ROCR)
pred <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- performance(prediction(pred2, bn[-t.id, "class"]), "tpr","fpe")
perf <- performance(prediction(pred2, bn[-t.id, "class"]),
"tpr","fpr")
perf <- performance(prediction(pred2, bn[-t.id, "class"]),
"tpr","fpr")
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- nnet(class ~ ., data = bn[t.id,],
size = 3, maxit = 10000, decay = 0.001, rang = 0.05,
na.action = na.omit, skip = T)
# ranf * max(|variables|) ~ 1
apply(bn, 2, max)
library(ROCR)
pred <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- performance(prediction(pred2, bn[-t.id, "class"]),
"tpr","fpr")
pred2 <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- performance(prediction(pred2, bn[-t.id,"class"]),
"tpr", "fpr")
pred2 <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- performance(prediction(pred2, bn[-t.id,"class"]),
"tpr", "fpr")
plot(perf)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
library(caret)
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(2018)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- lda(bn[t.id, 1:4], bn[t.id,5])
bn[t.ids, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
library(MASS)
library(caret)
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(2018)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- lda(bn[t.id, 1:4], bn[t.id,5])
bn[t.ids, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
bn[t.ids, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(2018)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- lda(bn[t.id, 1:4], bn[t.id,5])
bn[t.ids, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(2018)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- lda(bn[t.id, 1:4], bn[t.id,5])
bn[t.ids, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
mod <- lda(bn[t.id,1:4], bn[t.id,5])
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
table(bn[t.id, "class"], bn[t.id, "Pred"], dnn = c("Actual", "Predichos"))
bn[-t.id, "Pred"] <- predict(mod, bn[-t.id, 1:4])$class
table(bn[-t.id, "class"], bn[-t.id, "Pred"], dnn = c("Actual", "Predichos"))
View(bn)
library(caret)
bh <- read.csv("../data/tema3/boston-housing-logistic.csv")
bh <- read.csv("../data/tema3/boston-housing-logistic.csv")
View(bh)
bh$class <- factor(bh$CLASS, levels = c(0,1))
set.seed(2018)
t.id <- createDataPartition(bh$CLASS, p=0.7, list=F)
mod <- glm(CLASS ~ ., data = bh[t.id, ], family = binomial)
bh <- read.csv("../data/tema3/boston-housing-logistic.csv")
bh$CLASS <- factor(bh$CLASS, levels = c(0,1))
set.seed(2018)
t.id <- createDataPartition(bh$CLASS, p=0.7, list=F)
mod <- glm(CLASS ~ ., data = bh[t.id, ], family = binomial)
summary(mod)
bh[-t.id, "PROB_SUCCESS"] <- predict(mod, newdata = bh[-t.id,], type="response")
bh[-t.id, "PRED_50"] <- ifelse(bh[-t.id, "PROB_SUCCESS"]>=0.5, 1, 0)
table(bh[-t.id,"CLASS"], bh[-t.id,"PRED_50"], dnn=c("Actual","Predicho"))
library(caret)
library(rpart)
library(rpart.plot)
bank = read.csv("../../proyectos/data/bank.csv")
head(bank)
View(bank)
bank = read.csv("../../proyectos/data/bank.csv", sep = ";")
head(bank)
View(bank)
training.ids <- createDataPartition(bank$y, p = 0.7, list = F)
mod <- rpart(y ~ ., data = bank[training.ids,],
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
mod
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
fancyRpartPlot(bank.cart , digits=2 , palettes = c("Purples", "Oranges"))
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", palettes = c("Purples", "Oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", palettes = c("Purples", "Oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", palette = c("Purples", "Oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=ifelse(tree$frame$yval > 30, 'red', 'green'))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=ifelse(tree$frame$yval > 30, 'red', 'green'))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=ifelse(mod$frame$yval > 30, 'red', 'green'))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=c("green", "orange", "red")[findInterval(tree$frame$yval, v = c(0,20,30))])
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=c("green", "orange", "red")[findInterval(mod$frame$yval, v = c(0,20,30))])
mod <- rpart(y ~ ., data = bank[training.ids,],
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
mod
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.col=c("green", "orange", "red")[findInterval(mod$frame$yval, v = c(0,20,30))])
prp(mod, extra=1, faclen=0,  nn=T, box.palette=c("green", "red"))
# examples using built-in palettes
prp(mod, extra=1, faclen=0,  nn=T, box.palette="GnRd")
prp(mod, extra=1, faclen=0,  nn=T, box.palette="Blues")
prp(mod, extra=1, faclen=0,  nn=T, box.palette=c("green", "red"))
# examples using built-in palettes
prp(mod, extra=1, faclen=0,  nn=T, box.palette="GnRd")
mod <- rpart(y ~ ., data = bank[training.ids,],
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
mod
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.palette=c("green", "red"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.palette=c("Purples", "oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.palette=c("purples", "oranges"))
par(mfrow=c(1,1))
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
library(ggplot2)
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
library(rattle)
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
#predict
cart_pred <- predict( mod , testdata , type = "class")
cart_prob <- predict( mod , testdata , type = "prob")
mod$cptable
0.8924051 +0.05079464
0.05188265+0.8924051
mod.pruned <- prune(mod, mod$cptable[4, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[5, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[4, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
fancyRpartPlot(mod.pruned , digits=2 , palettes = c("Purples", "Oranges"))
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
fancyRpartPlot(mod.pruned , digits=2 , palettes = c("Purples", "Oranges"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="class")
table(banknote[-training.ids,]$class, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$class, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"), type="prob")
table(bank[-training.ids,]$y, mod.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, mod.pruned,
dnn = c("Actual", "Predicho"))
pred
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="prob")
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="class")
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned1 <- predict(mod.pruned, bank[-training.ids,], type="prob")
table(bank[-training.ids,]$y, pred.pruned,pred.pruned1,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned1,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
t.ids <- createDataPartition(bank$Y, p = 0.7, list = F)
bank = read.csv("../../proyectos/data/bank.csv", sep = ";")
t.ids <- createDataPartition(bank$Y, p = 0.7, list = F)
mod <- svm(Y ~ ., data = bank[training.ids, ] )
library(e1071)
mod <- svm(Y ~ ., data = bank[training.ids, ] )
mod <- svm(y ~ ., data = bank[training.ids, ] )
mod <- svm(y ~ ., data = bank[training.ids, ] )
library(class)
library(caret)
bank = read.csv("../../proyectos/scripts/analisis bank.R", sep = ";")
bank = read.csv("../../proyectos/scripts/analisis bank.R", sep = ";")
bank = read.csv("../../proyectos/data/bank.csv", sep = ";")
t.ids <- createDataPartition(vac$Result, p = 0.5, list = F)
t.ids <- createDataPartition(bank$y, p = 0.5, list = F)
train <- bank[t.ids, ]
temp <- bank[-t.ids, ]
v.ids <- createDataPartition(bank$y, p = 0.5, list = F)
val <- temp[v.ids,]
test <- temp[-v.ids, ]
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,3], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,20], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred1 <- knn(train[,20:21], val[,20:21], train[,20], k = 5)
pred1 <- knn(train[,21:22], val[,21:22], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
pred1 <- knn(train[,21], val[,21], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
bank.knn <- train(y ~ ., data = traindata, method = "knn",
maximize = TRUE,
trControl = trainControl(method = "cv", number = 10),
preProcess=c("center", "scale"))
bank.knn <- train(y ~ ., data = bank, method = "knn",
maximize = TRUE,
trControl = trainControl(method = "cv", number = 10),
preProcess=c("center", "scale"))
summary(tuned)
summary(mod)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = '_')
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
library(dummies)
library(FNN)
library(scales)
library(caret)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = '_')
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
t.id <- createDataPartition(edu$expense, p=0.6, list = FALSE)
tr <- edu[t.id, ]
temp <- edu[-t.id, ]
v.id <- createDataPartition(temp$expense, p=0.5, list=F)
val <- temp[v.id,]
test <- temp[-v.id,]
reg1 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=1,
algorithm = "brute")
rmse1 <- sqrt(mean((reg1$pred-val$expense)^2))
rmse1
View(edu)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = "_")
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
t.id <- createDataPartition(edu$expense, p=0.6, list = F)
tr <- edu[t.id, ]
temp <- edu[-t.id, ]
v.id <- createDataPartition(temp$expense, p=0.5, list = F)
val <- temp[v.id,]
test <- temp[-v.id,]
reg1 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=1,
algorithm = "brute")
rmse1 <- sqrt(mean((reg1$pred-val$expense)^2))
rmse1
reg2 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=2,
algorithm = "brute")
rmse2 <- rmse(val$expense, reg2$pred)
rmse2
reg3 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=3,
algorithm = "brute")
rmse3 <- rmse(val$expense, reg3$pred)
rmse3
df = data.frame(actual = val$expense, pred = reg3$pred)
plot(df)
View(dms)
View(temp)
library(caret)
auto <- read.csv("../data/tema4/auto-mpg.csv")
auto$cylinders <<- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c", "4c", "5c", "6c","8c"))
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c", "4c", "5c", "6c","8c"))
set.seed(2018)
t.id <- createDataPartition(auto$mpg, p=0.7, list=F)
nmaes(auto)
names(auto)
View(auto)
mod<- lm(mpg ~ ., data = auto[t.id, -c (1,8,9)])
mod
summary(mod)
boxplot(mod$residuals)
View(mod)
pred <- predict(mod, auto[-t.id, -c(1,8,9)])
par(mfrow=c(2,2))
plot(mod)
100/239
105/239
107/239
108/239
auto <- within(auto,
cylinders = relevel(cylinders, ref="4c"))
auto <- within(auto,
cylinders = relevel(cylinders, ref="4c"))
auto <- within(auto,
cylinders <- relevel(cylinders, ref="4c"))
mod <- lm(mpg ~. , data = auto[-t.id, -c(1,8,9)])
mod
pred <- predict(mod, auto[-t.id, -c(1,8,9)])
plot(mod)
library(MASS)
mod
summary(mod)
step.model <- stepAIC(mod, direction = "forward")
summary(step.model)
step.model <- stepAIC(mod, direction = "backward")
summary(step.model)
step.model <- stepAIC(mod, direction = "backward")
summary(step.model)
install.packages("rpart")
protein <- read.csv("../data/tema5/protein.csv")
protein <- read.csv("../data/tema5/protein.csv")
View(protein)
data <- as.data.frame(scale(protein[,-1]))
View(data)
View(protein)
data$Country = protein$Country
View(data)
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
protein <- read.csv("../data/tema5/protein.csv")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
plot(hc, hang = -0.01, cex = 0.7)
rownames(data) = data$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
plot(hc, hang = -0.01, cex = 0.7)
View(t.id)
protein <- read.csv("../data/tema5/protein.csv")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
rownames(data) = data$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
View(hc)
View(data)
plot(hc, hang = -0.01, cex = 0.7)
d <- dist(data, method = "euclidean")
d
library(OpenImageR)
library(ClusterR)
img <- readImage("../data/tema5/bird.jpg")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
library(OpenImageR)
library(ClusterR)
library(Rcpp)
img <- readImage("../data/tema5/bird.jpg")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
imageShow(img.resize)
img.vector <- apply(img.resize, 3, as.vector)
dim(img.vector)
kmmb <- MiniBatchKmeans(img.vector, clusters = 5, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
View(kmmb)
kmmb
prmb <- predict_MBatchKMeans(img.vector, )
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
prmb
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
imageShow(new.img)
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
kmmb <- MiniBatchKmeans(img.vector, clusters = 5, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
kmmb <- MiniBatchKmeans(img.vector, clusters = 64, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
kmmb
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
prmb
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
9+4+33+18+915
9+4+33+18+
44}+
9+4+33+18+9+15
88/60
114/239
116/239
118/239
220/239
88-60
protein <- read.csv("../data/tema5/protein.csv")
protein$Country <- NULL
rownames(protein) <- protein$Country
protein <- read.csv("../data/tema5/protein.csv")
rownames(protein) <- protein$Country
protein$Country <- NULL
protein.scaled <- as.data.frame(scale(protein))
library(cluster)
library(factoextra)
km <- pam(protein.scaled, 4)
km
fviz_cluster(km)
clarafit <- clara(protein.scaled, 4, samples = 5)
clarafit
130/239
126/239
128/239
