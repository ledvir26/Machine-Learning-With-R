fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.palette=c("Purples", "oranges"))
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray", box.palette=c("purples", "oranges"))
par(mfrow=c(1,1))
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
library(ggplot2)
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
library(rattle)
fancyRpartPlot(mod , digits=2 , palettes = c("Purples", "Oranges"))
#predict
cart_pred <- predict( mod , testdata , type = "class")
cart_prob <- predict( mod , testdata , type = "prob")
mod$cptable
0.8924051 +0.05079464
0.05188265+0.8924051
mod.pruned <- prune(mod, mod$cptable[4, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[5, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[4, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
fancyRpartPlot(mod.pruned , digits=2 , palettes = c("Purples", "Oranges"))
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves =  TRUE, faclen = 4 , varlen = 8,
shadow.col = "gray")
fancyRpartPlot(mod.pruned , digits=2 , palettes = c("Purples", "Oranges"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="class")
table(banknote[-training.ids,]$class, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$class, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"), type="prob")
table(bank[-training.ids,]$y, mod.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, mod.pruned,
dnn = c("Actual", "Predicho"))
pred
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="prob")
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned <- predict(mod.pruned, bank[-training.ids,], type="class")
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
pred.pruned1 <- predict(mod.pruned, bank[-training.ids,], type="prob")
table(bank[-training.ids,]$y, pred.pruned,pred.pruned1,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned1,
dnn = c("Actual", "Predicho"))
table(bank[-training.ids,]$y, pred.pruned,
dnn = c("Actual", "Predicho"))
t.ids <- createDataPartition(bank$Y, p = 0.7, list = F)
bank = read.csv("../../proyectos/data/bank.csv", sep = ";")
t.ids <- createDataPartition(bank$Y, p = 0.7, list = F)
mod <- svm(Y ~ ., data = bank[training.ids, ] )
library(e1071)
mod <- svm(Y ~ ., data = bank[training.ids, ] )
mod <- svm(y ~ ., data = bank[training.ids, ] )
mod <- svm(y ~ ., data = bank[training.ids, ] )
library(class)
library(caret)
bank = read.csv("../../proyectos/scripts/analisis bank.R", sep = ";")
bank = read.csv("../../proyectos/scripts/analisis bank.R", sep = ";")
bank = read.csv("../../proyectos/data/bank.csv", sep = ";")
t.ids <- createDataPartition(vac$Result, p = 0.5, list = F)
t.ids <- createDataPartition(bank$y, p = 0.5, list = F)
train <- bank[t.ids, ]
temp <- bank[-t.ids, ]
v.ids <- createDataPartition(bank$y, p = 0.5, list = F)
val <- temp[v.ids,]
test <- temp[-v.ids, ]
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,3], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,20], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred1 <- knn(train[,20:21], val[,20:21], train[,20], k = 5)
pred1 <- knn(train[,21:22], val[,21:22], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
pred1 <- knn(train[,21], val[,21], train[,21], k = 5)
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
errmat1 <- table(bank$y, pred1, dnn = c("Actual", "Predichos"))
pred1 <- knn(train[,20:21], val[,20:21], train[,21], k = 5)
bank.knn <- train(y ~ ., data = traindata, method = "knn",
maximize = TRUE,
trControl = trainControl(method = "cv", number = 10),
preProcess=c("center", "scale"))
bank.knn <- train(y ~ ., data = bank, method = "knn",
maximize = TRUE,
trControl = trainControl(method = "cv", number = 10),
preProcess=c("center", "scale"))
summary(tuned)
summary(mod)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = '_')
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
library(dummies)
library(FNN)
library(scales)
library(caret)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = '_')
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
t.id <- createDataPartition(edu$expense, p=0.6, list = FALSE)
tr <- edu[t.id, ]
temp <- edu[-t.id, ]
v.id <- createDataPartition(temp$expense, p=0.5, list=F)
val <- temp[v.id,]
test <- temp[-v.id,]
reg1 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=1,
algorithm = "brute")
rmse1 <- sqrt(mean((reg1$pred-val$expense)^2))
rmse1
View(edu)
edu <- read.csv("../data/tema4/education.csv")
dms <- dummy(edu$region, sep = "_")
edu <- cbind(edu, dms)
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)
set.seed(2018)
t.id <- createDataPartition(edu$expense, p=0.6, list = F)
tr <- edu[t.id, ]
temp <- edu[-t.id, ]
v.id <- createDataPartition(temp$expense, p=0.5, list = F)
val <- temp[v.id,]
test <- temp[-v.id,]
reg1 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=1,
algorithm = "brute")
rmse1 <- sqrt(mean((reg1$pred-val$expense)^2))
rmse1
reg2 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=2,
algorithm = "brute")
rmse2 <- rmse(val$expense, reg2$pred)
rmse2
reg3 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=3,
algorithm = "brute")
rmse3 <- rmse(val$expense, reg3$pred)
rmse3
df = data.frame(actual = val$expense, pred = reg3$pred)
plot(df)
View(dms)
View(temp)
library(caret)
auto <- read.csv("../data/tema4/auto-mpg.csv")
auto$cylinders <<- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c", "4c", "5c", "6c","8c"))
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c", "4c", "5c", "6c","8c"))
set.seed(2018)
t.id <- createDataPartition(auto$mpg, p=0.7, list=F)
nmaes(auto)
names(auto)
View(auto)
mod<- lm(mpg ~ ., data = auto[t.id, -c (1,8,9)])
mod
summary(mod)
boxplot(mod$residuals)
View(mod)
pred <- predict(mod, auto[-t.id, -c(1,8,9)])
par(mfrow=c(2,2))
plot(mod)
100/239
105/239
107/239
108/239
auto <- within(auto,
cylinders = relevel(cylinders, ref="4c"))
auto <- within(auto,
cylinders = relevel(cylinders, ref="4c"))
auto <- within(auto,
cylinders <- relevel(cylinders, ref="4c"))
mod <- lm(mpg ~. , data = auto[-t.id, -c(1,8,9)])
mod
pred <- predict(mod, auto[-t.id, -c(1,8,9)])
plot(mod)
library(MASS)
mod
summary(mod)
step.model <- stepAIC(mod, direction = "forward")
summary(step.model)
step.model <- stepAIC(mod, direction = "backward")
summary(step.model)
step.model <- stepAIC(mod, direction = "backward")
summary(step.model)
install.packages("rpart")
protein <- read.csv("../data/tema5/protein.csv")
protein <- read.csv("../data/tema5/protein.csv")
View(protein)
data <- as.data.frame(scale(protein[,-1]))
View(data)
View(protein)
data$Country = protein$Country
View(data)
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
protein <- read.csv("../data/tema5/protein.csv")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
plot(hc, hang = -0.01, cex = 0.7)
rownames(data) = data$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
plot(hc, hang = -0.01, cex = 0.7)
View(t.id)
protein <- read.csv("../data/tema5/protein.csv")
data <- as.data.frame(scale(protein[,-1]))
data$Country = protein$Country
rownames(data) = data$Country
hc <- hclust(dist(data, method = "euclidean"), method = "ward.D2")
hc
View(hc)
View(data)
plot(hc, hang = -0.01, cex = 0.7)
d <- dist(data, method = "euclidean")
d
library(OpenImageR)
library(ClusterR)
img <- readImage("../data/tema5/bird.jpg")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
library(OpenImageR)
library(ClusterR)
library(Rcpp)
img <- readImage("../data/tema5/bird.jpg")
img.resize <- resizeImage(img, 350, 350,
method = "bilinear")
imageShow(img.resize)
img.vector <- apply(img.resize, 3, as.vector)
dim(img.vector)
kmmb <- MiniBatchKmeans(img.vector, clusters = 5, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
View(kmmb)
kmmb
prmb <- predict_MBatchKMeans(img.vector, )
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
prmb
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
imageShow(new.img)
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
kmmb <- MiniBatchKmeans(img.vector, clusters = 5, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
kmmb <- MiniBatchKmeans(img.vector, clusters = 64, batch_size = 20, num_init = 5,
max_iters = 100, init_fraction = 0.2,
initializer = "kmeans++",
early_stop_iter = 10, verbose = F)
kmmb
prmb <- predict_MBatchKMeans(img.vector, kmmb$centroids)
prmb
get.cent.mb <- kmmb$centroids
new.img <- get.cent.mb[prmb,]
dim(new.img) <- c(nrow(img.resize), ncol(img.resize), 3)
imageShow(new.img)
9+4+33+18+915
9+4+33+18+
44}+
9+4+33+18+9+15
88/60
114/239
116/239
118/239
220/239
88-60
protein <- read.csv("../data/tema5/protein.csv")
protein$Country <- NULL
rownames(protein) <- protein$Country
protein <- read.csv("../data/tema5/protein.csv")
rownames(protein) <- protein$Country
protein$Country <- NULL
protein.scaled <- as.data.frame(scale(protein))
library(cluster)
library(factoextra)
km <- pam(protein.scaled, 4)
km
fviz_cluster(km)
clarafit <- clara(protein.scaled, 4, samples = 5)
clarafit
130/239
126/239
128/239
AMZN <- read.csv("../data/tema6/AMZN.csv", stringsAsFactors = F)
head(AMZN)
AAPL <- read.csv("../data/tema6/AAPL.csv", stringsAsFactors = F)
FB <- read.csv("../data/tema6/FB.csv", stringsAsFactors = F)
GOOG <- read.csv("../data/tema6/GOOG.csv", stringsAsFactors = F)
AMZN <- AMZN[AMZN$Date >= '2008-01-01']
AMZN <- AMZN[AMZN$Date >= '2008-01-01',]
GOOG <- GOOG[GOOG$Date >= '2008-01-01',]
AAPL <- AAPL[AAPL$Date >= '2008-01-01',]
AAPL$Date <- as.Date(AAPL$Date)
AMZN$Date <- as.Date(AMZN$Date)
FB$Date <- as.Date(FB$Date)
GOOG$Date <- as.Date(GOOG$Date)
library(ggplot2)
ggplot(AAPL, aes(Date, Close)) +
geom_line(aes(color="Apple")) +
geom_line(AMZN, aes(color = "Amazon")) +
geom_line(FB, aes(color="Facebook")) +
geom_line(GOOG, aes(color="Google")) +
labs(color="Legend") +
ggplot(AAPL, aes(Date, Close)) +
geom_line(aes(color="Apple")) +
geom_line(AMZN, aes(color = "Amazon")) +
geom_line(FB, aes(color="Facebook")) +
geom_line(GOOG, aes(color="Google")) +
labs(color="Legend") +
scale_color_manual("",
breaks = c("Apple", "Amazon", "Facebook", "Google"),
values = c("gray", "yellow", "blue", "red")) +
ggtitle("Comparaciones de Cierre de Stocks") +
theme(plot.title = element_text(lineheight = 0.7, face = "bold"))
ggplot(AAPL, aes(Date, Close)) +
geom_line(aes(color="Apple")) +
geom_line(AMZN, aes(color = "Amazon")) +
geom_line(FB, aes(color="Facebook")) +
geom_line(GOOG, aes(color="Google")) +
labs(color="Legend") +
scale_color_manual("",
breaks = c("Apple", "Amazon", "Facebook", "Google"),
values = c("gray", "yellow", "blue", "red")) +
ggtitle("Comparaciones de Cierre de Stocks") +
theme(plot.title = element_text(lineheight = 0.7, face = "bold"))
ggplot(AAPL, aes(Date, Close)) +
geom_line(aes(color="Apple")) +
geom_line(data=AMZN, aes(color = "Amazon"))+
geom_line(data=FB, aes(color="Facebook"))+
geom_line(data=GOOG, aes(color="Google"))+
labs(color="Legend")+
scale_color_manual("",
breaks = c("Apple", "Amazon", "Facebook", "Google" ),
values = c("gray", "yellow", "blue", "red"))+
ggtitle("Comparaciones de cierre de stocks")+
theme(plot.title = element_text(lineheight = 0.7, face = "bold"))
140/239
install.packages("queantmod")
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
getSymbols("AAPL")
View(AAPL)
barChart(AAPL)
141/239
18+18+15+11+13+8
83-60
152/239
155
/
155/239
18+18+15+11+13+8
83-18
wmt <- read.csv("../data/tema6/WMT.csv", stringsAsFactors = F)
plot(wmt$Adj.Close, type = "l")
d <- diff(wmt$Adj.Close)
head(d)
View(wmt)
plot(d, type = "l")
hist(d, prob=T, ylim = c(0,0.8), breaks = 30, main = "Walmart Stocks", col = "green")
lines(density(d), lwd=3)
wmt.m <- read.csv("../data/tema6/WMT-monthly.csv", stringsAsFactors = F)
vmt.m.ts <- ts(wmt.m$Adj.Close)
d <- diff(as.numeric(vmt.m.ts))
d
wmt.m.return <- d / lag(as.numeric(wmt.m.ts), k = -1)
vmt.m.ts <- ts(wmt.m$Adj.Close)
d <- diff(as.numeric(vmt.m.ts))
d
wmt.m.return <- d / lag(as.numeric(wmt.m.ts), k = -1)
wmt.m.ts <- ts(wmt.m$Adj.Close)
d <- diff(as.numeric(vmt.m.ts))
d
wmt.m.return <- d / lag(as.numeric(wmt.m.ts), k = -1)
hist(wmt.m.return, prob = T, col = "blue")
18+15+11+13+8
152/239
142/239
153/239
154/239
155/239
155-142
11+13+8
s <- read.csv("../data/tema6/ts-example.csv")
head(s)
s.ts <- ts(s)
class(s.ts)
head(s.ts)
plot(s.ts)
s.ts.a <- ts(s, start = 2001)
s.ts.a
plot(s.ts.a)
s.ts.m <- ts(s, start = c(2001,1), frequency = 12)
s.ts.m
plot(s.ts.m)
s.ts.q <- ts(s, start = 2001, frequency = 4)
s.ts.q
plot(s.ts.q)
start(s.ts.m)
end(s.ts.m)
frequency(s.ts.m)
start(s.ts.q)
end(s.ts.q)
frequency(s.ts.q)
prices <- read.csv("../data/tema6/prices.csv")
head(prices)
prices.ts <- ts(prices, start = c(1980,1), frequency = 12)
prices.ts
plot(prices.ts)
plot(prices.ts, plot.type = "single", col = 1:2)
legend("topleft", colnames(prices.ts), col = 1:2, lty = 1)
#stl
#Seasonal Decomposition of Time Series by Loess
flour.l <- log(prices.ts[,1])
flour.stl<- stl(flour.l, s.window = "period")
plot(flour.stl)
flour.stl
11+13+8
32-11
s <- read.csv("../data/tema6/ts-example.csv")
s$sales
plot(s$sales, type = "l")
n <- 7
weights <- rep(1/n, n)
weights
s.fil.1 <- filter(s$sales, filter = weights, sides = 2)
lines(s.fil.1, col = "blue", lwd = 3)
s.fil.2 <- filter(s$sales, filter = weights, sides = 1)
lines(s.fil.2, col = "red", lwd = 3)
145/239
155/239
inf <- read.csv("../data/tema6/infy-monthly.csv")
head(inf)
inf <- read.csv("../data/tema6/INFY-monthly.csv")
tail(inf)
inf.ts <- ts(inf$Adj.Close, start=c(1999,3), frequency = 12)
inf.ts
plot(inf.ts)
inf.hw <- HoltWinters(inf.ts)
plot(inf.hw, col = "blue", col.predicted = "red")
inf.hw$SSE
inf.hw$alpha
inf.hw$beta
inf.hw$gamma
head(inf.hw$fitted)
install.packages("forecast")
library(forecast)
infy.fore <- forecast(inf.hw, h=24)
plot(infy.fore)
infy.fore$lower
infy.fore$upper
#modelo autorregresivo integrado de media mÃ³vil
inf <- read.csv("../data/tema6/INFY-monthly.csv")
inf.ts <- ts(inf$Adj.Close, start = c(1999,3), frequency = 12)
inf.arima <- auto.arima(inf.ts)
summary(inf.arima)
inf.fore <- forecast(inf.arima, h = 12)
plot(inf.fore, col = "red",
fcol = "green")
